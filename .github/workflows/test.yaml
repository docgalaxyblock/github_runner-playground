name: Test

on:
  workflow_dispatch:
    inputs:
      amd64:
        description: 'Build amd64 image'
        type: boolean
        required: true
        default: true
      arm64:
        description: 'Build arm64 image'
        type: boolean
        required: true
        default: true

# Allow to stop obsolete workflows
concurrency:
  group: ci-buildtrain-${{ github.ref }}-1
  cancel-in-progress: true

# permissions are needed if pushing to ghcr.io
permissions:
  packages: write



jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix_name: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Create Matrix
        id: set-matrix
        shell: bash
        run: |
          cat << EOF > setup.sh
          #!/usr/bin/env bash
          if [[ ${{ inputs.amd64 }} == 'true' && ${{ inputs.arm64 }} == 'true']]; then
            echo "matrix=[ linux/amd64 , linux/arm64 ]" >> $GITHUB_OUTPUT

          elseif [[ ${{ inputs.amd64 }} == 'true' && ${{ inputs.arm64 }} == 'false']]; then
            echo "matrix=linux/amd64" >> $GITHUB_OUTPUT

          elseif [[ ${{ inputs.amd64 }} == 'false' && ${{ inputs.arm64 }} == 'true']]; then
            echo "matrix=linux/arm64" >> $GITHUB_OUTPUT

          else
            exit
          fi
          EOF

          chmod +x setup.sh
          ./setup.sh




  test:
    needs: setup
    runs-on: ubuntu-latest
    #runs-on: [ self-hosted, linux, ARM64 ]

    strategy:
      fail-fast: false
      matrix:
        docker_build_arch: ${{ needs.setup.outputs.matrix_name }}

        #${{ github.run_number == 1 && 'self-hosted' || 'ubuntu-latest' }}
        

    steps:

    - name: Test
      run: |
        echo needs.setup.outputs.matrix: ${{ needs.setup.outputs.matrix_name }}
        echo matrix.docker_build_arch: ${{ matrix.docker_build_arch }}





################################
      # Get the repository's code
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          repository: "docgalaxyblock/open_mower_ros"
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          # list of Docker images to use as base name for tags
#          images: |
#            ghcr.io/${{github.repository}}
          # generate Docker tags based on the following events/attributes
#          tags: |
#            type=schedule
#            type=ref,event=branch
#            type=ref,event=pr
#            type=semver,pattern={{version}}
#            type=semver,pattern={{major}}.{{minor}}
#            type=semver,pattern={{major}}
#            type=sha

      # https://github.com/docker/setup-qemu-action
#      - name: Set up QEMU (arm64)
#        if: runner.arch != 'arm64' && ( matrix.docker_build_arch == 'linux/arm64' )
#        uses: docker/setup-qemu-action@v2
#        with:
#          platforms: arm64
#      - name: Set up QEMU (x64)
#        if: runner.arch != 'x64' && ( matrix.docker_build_arch == 'linux/amd64' )
#        uses: docker/setup-qemu-action@v2
#        with:
#          platforms: amd64

      # https://github.com/docker/setup-buildx-action
#      - name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v2

#      - name: Login to GHCR
#        if: github.event_name != 'pull_request'
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.GITHUB_TOKEN }}

#      - name: Build and push (github-hosted)
#        #if:  != 'self-hosted'
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          platforms: ${{ matrix.docker_build_arch }}
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ steps.meta.outputs.tags }}
#          labels: ${{ steps.meta.outputs.labels }}
      #    cache-from: type=gha
      #    cache-to: type=gha,mode=max

      #- name: Build and push (self-hosted)
      #  if:  == 'self-hosted'
      #  uses: docker/build-push-action@v3
      #  with:
      #    context: .
      #    platforms: linux/amd64,linux/arm64
      #    push: ${{ github.event_name != 'pull_request' }}
      #    tags: ${{ steps.meta.outputs.tags }}
      #    labels: ${{ steps.meta.outputs.labels }}
      #    cache-from: type=gha
      #    cache-to: type=gha,mode=max